{"version":3,"sources":["components/ScenarioEditor.tsx","components/FileDropper.tsx","constants.ts","axiosInstance.ts","components/Scenarios.tsx","components/FileUpload.tsx","components/FileUploader.tsx","hooks/useInterval.ts","components/ProcessHandler.tsx","components/Processes.tsx","components/Converter.tsx","MainWindow.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["ASCAD_TOOLBOX","kind","contents","name","colour","type","ScenarioEditor","useState","xml","setXml","toolboxConfiguration","initialXml","onXmlChange","className","workspaceConfiguration","grid","spacing","length","snap","FileDropper","onFileUpload","maxFileSize","filesLimit","dropzoneText","onChange","files","apply","CONSTANTS","API_BASE_URL","GENERIC_USER_KEY","axios","create","baseURL","headers","useStyles","makeStyles","theme","createStyles","root","margin","Scenarios","onSelectedScenarioChange","classes","scenarios","setSenarios","selectedScenario","setSelectedScenario","updateScenario","useCallback","scenario","useEffect","axiosInstance","get","then","response","status","scenarioListJson","data","Grid","container","direction","justifyContent","alignItems","CircularProgress","Typography","FormControl","component","FormLabel","RadioGroup","value","id","event","selectedScenarioID","Number","parseInt","target","find","map","FormControlLabel","control","Radio","color","label","doneAvatar","backgroundColor","green","width","height","errorAvatar","red","FileUpload","file","onEnd","onValidUpload","progress","setProgress","isDone","setIsDone","error","setError","onProgress","stopPropagation","Math","round","loaded","total","call","formData","FormData","append","toString","post","onUploadProgress","statusText","model","uid","catch","message","Box","display","mr","LinearProgress","variant","minWidth","Tooltip","title","Avatar","Clear","Check","FileUploader","onFileUploadEnd","uploadedFiles","setUploadedFiles","modelIds","setModelIds","handleUploadEnd","upFiles","handleValidUpload","modelId","oldModelIds","nOldModelIds","slice","push","i","useInterval","callback","delay","savedCallback","useRef","current","setInterval","clearInterval","downloadButton","logAccordion","wordWrap","whiteSpace","wordBreak","ProcessHandler","modelUid","process","setProcess","processResult","setProcessResult","JSON","stringify","Object","fromEntries","item","Button","onClick","url","modelOutUid","a","document","createElement","href","download","body","appendChild","click","removeChild","size","disabled","Accordion","AccordionSummary","expandIcon","ExpandMore","AccordionDetails","log","replace","Processes","Converter","uploadedModelsIds","setUploadedModelsIds","paper","padding","steps","contentContainer","minHeight","backButton","marginRight","instructions","marginTop","marginBottom","MainWindow","activeStep","setActiveStep","setFiles","handleFileUpload","handleSelectedScenarioChange","style","Paper","Stepper","alternativeLabel","stepLabel","Step","StepLabel","stepIndex","getStepContent","previousStep","canProceedToNextStep","App","exact","path","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"mQAGMA,EAAgB,CACpBC,KAAM,kBACNC,SAAU,CACR,CACED,KAAM,WACNE,KAAM,QACNC,OAAQ,UACRF,SAAU,CACR,CACED,KAAM,QACNI,KAAM,eAER,CACEJ,KAAM,QACNI,KAAM,mBAIZ,CACEJ,KAAM,WACNE,KAAM,OACNC,OAAQ,UACRF,SAAU,CACR,CACED,KAAM,QACNI,KAAM,cAER,CACEJ,KAAM,QACNI,KAAM,iBAIZ,CACEJ,KAAM,WACNE,KAAM,SACNC,OAAQ,UACRF,SAAU,CACR,CACED,KAAM,QACNI,KAAM,yBAER,CACEJ,KAAM,QACNI,KAAM,cA4BDC,EArBkB,WAC/B,MAAsBC,mBAAS,IAA/B,mBAAOC,EAAP,KAAYC,EAAZ,KAEA,OACE,cAAC,mBAAD,CACEC,qBAAsBV,EACtBW,WAAYH,EACZI,YAAaH,EACbI,UAAU,cACVC,uBAAwB,CACtBC,KAAM,CACJC,QAAS,GACTC,OAAQ,EACRb,OAAQ,OACRc,MAAM,O,4GC5CDC,EAlBiC,SAAC,GAE1C,IADLC,EACI,EADJA,aAOA,OACE,cAAC,IAAD,CACEC,YAAa,IACbC,WAAY,GACZC,aAAc,0CACdC,SATiB,SAACC,GACR,OAAZL,QAAY,IAAZA,KAAcM,MAAM,KAAM,CAACD,Q,sDCXlBE,EAAY,CAEvBC,aAAc,iCAEdC,iBAAkB,MCDLC,E,OAAAA,EAAMC,OAAO,CAC1BC,QAASL,EAAUC,aACnBK,QAAS,CACP,eAAgB,sBCCdC,EAAYC,aAAW,SAACC,GAAD,OAC3BC,YAAa,CACXC,KAAM,CACJC,OAAQH,EAAMpB,QAAQ,SAiFbwB,EA1E6B,SAAC,GAEtC,IAAD,EADJC,EACI,EADJA,yBAEMC,EAAUR,IAChB,EAAiC3B,mBAA4B,MAA7D,mBAAOoC,EAAP,KAAkBC,EAAlB,KACA,EAAgDrC,mBAA0B,MAA1E,mBAAOsC,EAAP,KAAyBC,EAAzB,KAEMC,EAAiBC,uBAAY,SAACC,GAClCH,EAAoBG,GACH,OAAbA,GACFR,EAAyBQ,KAE1B,IAEHC,qBAAU,WACRC,EAAcC,IAAI,cAAcC,MAAK,SAACC,GACpC,GAAwB,MAApBA,EAASC,OAAgB,CAC3B,IAAMC,EAAmBF,EAASG,KAClCb,EAAYY,GACRA,EAAiBvC,OAAS,GAC5B8B,EAAeS,EAAiB,SAGlCZ,EAAY,WAGf,CAACG,IAOJ,OACE,qBAAKlC,UAAW6B,EAAQJ,KAAxB,SACE,cAACoB,EAAA,EAAD,CACEC,WAAS,EACTC,UAAU,SACVC,eAAe,SACfC,WAAW,SAJb,SAMiB,OAAdnB,EACC,qCACE,cAACoB,EAAA,EAAD,IACA,cAACC,EAAA,EAAD,sCAKF,eAACC,EAAA,EAAD,CAAaC,UAAU,WAAvB,UACE,cAACC,EAAA,EAAD,CAAWD,UAAU,SAArB,uBAGA,cAACE,EAAA,EAAD,CACEjE,KAAK,WACLkE,MAAK,iBAAExB,QAAF,IAAEA,OAAF,EAAEA,EAAkByB,UAApB,SAA2B,EAChC9C,SA5BS,SAAC+C,GAAgD,IAAD,EAC7DC,EAAqBC,OAAOC,SAAUH,EAAMI,OAA4BN,OAC9EtB,EAAc,iBAACJ,QAAD,IAACA,OAAD,EAACA,EAAWiC,MAAK,SAAC3B,GAAD,OAAcA,EAASqB,KAAOE,YAA/C,QAAsE,OAuB5E,SAKiB,OAAd7B,GAAsBA,EAAUkC,KAAI,SAAC5B,GAAD,OACnC,cAAC6B,EAAA,EAAD,CAEET,MAAOpB,EAASqB,GAChBS,QAAS,cAACC,EAAA,EAAD,CAAOC,MAAM,YACtBC,MAAOjC,EAAS9C,MAHX8C,EAASqB,iB,sECnE1BpC,EAAYC,aAAW,SAACC,GAAD,OAC3BC,YAAa,CACX8C,WAAY,CACVC,gBAAiBC,IAAM,KACvBC,MAAOlD,EAAMpB,QAAQ,GACrBuE,OAAQnD,EAAMpB,QAAQ,IAExBwE,YAAa,CACXJ,gBAAiBK,IAAI,KACrBH,MAAOlD,EAAMpB,QAAQ,GACrBuE,OAAQnD,EAAMpB,QAAQ,SA+Fb0E,EAvF+B,SAAC,GAIxC,IAHLC,EAGI,EAHJA,KACAC,EAEI,EAFJA,MACAC,EACI,EADJA,cAEMnD,EAAUR,IAChB,EAAgC3B,mBAAS,GAAzC,mBAAOuF,EAAP,KAAiBC,EAAjB,KACA,EAA4BxF,oBAAS,GAArC,mBAAOyF,EAAP,KAAeC,EAAf,KACA,EAA0B1F,mBAAwB,MAAlD,mBAAO2F,EAAP,KAAcC,EAAd,KAEMC,EAAa,SAAC7B,GAClBA,EAAM8B,kBACNN,EAAYO,KAAKC,MAAM,IAAMhC,EAAMiC,OAASjC,EAAMkC,QAC9ClC,EAAMiC,SAAWjC,EAAMkC,QACzBR,GAAU,GACL,OAALL,QAAK,IAALA,KAAOc,KAAK,QA0ChB,OApBAxD,qBAAU,WACR,IAAMyD,EAAW,IAAIC,SACrBD,EAASE,OAAO,SAAUlF,EAAUE,iBAAiBiF,YACrDH,EAASE,OAAO,eAAgBlB,GAEhCxC,EACG4D,KAAK,UAAWJ,EAAU,CAACK,iBAAkBZ,IAC7C/C,MAAK,SAACC,GACL,GAAwB,MAApBA,EAASC,OACX4C,EAAS,GAAD,OAAI7C,EAASC,OAAb,YAAuBD,EAAS2D,iBACnC,CACL,IAAMC,EAAQ5D,EAASG,KACV,OAAboC,QAAa,IAAbA,KAAea,KAAK,KAAMQ,EAAMC,SAGnCC,OAAM,SAAAlB,GACLC,EAASD,EAAMmB,cAElB,IAGD,qCACE,cAAC3D,EAAA,EAAD,CACEC,WAAS,EACTE,eAAe,SACfD,UAAU,MACVE,WAAW,SAJb,SAME,cAACE,EAAA,EAAD,UACG2B,EAAKxF,SAGV,eAACmH,EAAA,EAAD,CACEC,QAAQ,OACRzD,WAAW,SAFb,UAIE,cAACwD,EAAA,EAAD,CACEhC,MAAM,MACNkC,GAAI,EAFN,SAIE,cAACC,EAAA,EAAD,CAAgBC,QAAQ,cAAcrD,MAAOyB,MAE/C,cAACwB,EAAA,EAAD,CAAKK,SAAU,GAAf,SA3DU,OAAVzB,EACK,cAAC0B,EAAA,EAAD,CAASC,MAAO3B,EAAhB,SACL,cAAC4B,EAAA,EAAD,CAAQjH,UAAW6B,EAAQ8C,YAA3B,SACE,cAACuC,EAAA,EAAD,QAIF/B,EACK,cAAC8B,EAAA,EAAD,CAAQjH,UAAW6B,EAAQyC,WAA3B,SACL,cAAC6C,EAAA,EAAD,MAGG,eAAChE,EAAA,EAAD,WACJ8B,EADI,iBCNImC,EA9CmC,SAAC,GAG5C,IAFLxG,EAEI,EAFJA,MACAyG,EACI,EADJA,gBAEA,EAA0C3H,mBAAS,GAAnD,mBAAO4H,EAAP,KAAsBC,EAAtB,KACA,EAAgC7H,mBAAmB,IAAnD,mBAAO8H,EAAP,KAAiBC,EAAjB,KAEMC,EAAkBvF,uBAAY,WAClCoF,GAAiB,SAACI,GAAD,OAAaA,EAAU,OACvC,IAEGC,EAAoB,SAACC,GACzBJ,GAAY,SAACK,GAEX,IAAMC,EAAeD,EAAYE,QAEjC,OADAD,EAAaE,KAAKJ,GACXE,MAUX,OANA1F,qBAAU,WACJmF,EAASpH,QAAUQ,EAAMR,SACZ,OAAfiH,QAAe,IAAfA,KAAiBxB,KAAK,KAAM2B,MAE7B,CAACF,EAAeE,IAGjB,qCACE,cAACrE,EAAA,EAAD,UACGmE,IAAkB1G,EAAMR,OAAxB,8CAEwBkH,EAFxB,YAEyC1G,EAAMR,OAF/C,OAKFQ,EAAMoD,KAAI,SAACc,EAAMoD,GAAP,OACT,cAAC,EAAD,CAEEpD,KAAMA,EACNC,MAAO2C,EACP1C,cAAe4C,GAHVM,U,oCCrBAC,MArBf,SAAqBC,EAAsBC,GACzC,IAAMC,EAAgBC,iBAAOH,GAG7B/F,qBAAU,WACRiG,EAAcE,QAAUJ,IACvB,CAACA,IAGJ/F,qBAAU,WAER,GAAc,OAAVgG,EAAJ,CAIA,IAAM5E,EAAKgF,aAAY,kBAAMH,EAAcE,YAAWH,GAEtD,OAAO,kBAAMK,cAAcjF,OAC1B,CAAC4E,KCXAhH,EAAYC,aAAW,SAACC,GAAD,OAC3BC,YAAa,CACXmH,eAAgB,CACdjH,OAAQH,EAAMpB,QAAQ,IAExByI,aAAc,CACZC,SAAU,aACVC,WAAY,WACZC,UAAW,kBAkHFC,EAzGuC,SAAC,GAGhD,IAAD,EAFJC,EAEI,EAFJA,SACA7G,EACI,EADJA,SAEMP,EAAUR,IAChB,EAA8B3B,mBAAyB,MAAvD,mBAAOwJ,EAAP,KAAgBC,EAAhB,KAGA,EAA0CzJ,mBAAyB,MAAnE,mBAAO0J,EAAP,KAAsBC,EAAtB,KACA,EAA4B3J,oBAAS,GAArC,mBAAOyF,EAAP,KAAeC,EAAf,KA8CA,OA/BA+C,GAAY,WAAO,IAAD,EAChB7F,EACGC,IADH,sCACqB2G,QADrB,IACqBA,OADrB,EACqBA,EAAS5C,WAD9B,QACqC,IAClC9D,MAAK,SAACC,GACL4G,EAAiB5G,EAASG,MACG,IAAZ,OAAbwG,QAAa,IAAbA,OAAA,EAAAA,EAAe1G,SACjB0C,GAAU,QAGH,OAAZ8D,GAAqB/D,EAAgB,KAAP,KAEjC9C,qBAAU,WACR,IAAMyD,EAAW,IAAIC,SACrBD,EAASE,OAAO,aAAciD,EAAShD,YACvCH,EAASE,OAAO,aAAc5D,EAASqB,GAAGwC,YAC1CH,EAASE,OAAO,SAAUlF,EAAUE,iBAAiBiF,YAErD3D,EACG4D,KAAK,aAAcoD,KAAKC,UAAUC,OAAOC,YAAY3D,KACrDtD,MAAK,SAACC,GACmB,MAApBA,EAASC,QAGXyG,EAAW1G,EAASG,SAGvB2D,OAAM,iBAGR,IAGD,qCACE,eAAC1D,EAAA,EAAD,CACEC,WAAS,EACTC,UAAU,MACVC,eAAe,gBACfC,WAAW,SAJb,UAME,cAACJ,EAAA,EAAD,CAAM6G,MAAI,EAAV,SACE,eAACvG,EAAA,EAAD,gCACqB8F,EADrB,kBAC8C7G,EAAS9C,UAGvD,cAACuD,EAAA,EAAD,CAAM6G,MAAI,EAAV,SACE,cAACC,EAAA,EAAD,CACE3J,UAAW6B,EAAQ8G,eACnBiB,QA5DW,WACrB,GAAsB,OAAlBR,EAAJ,CAGA,IAAMS,EAAG,UAAM/I,EAAUC,aAAhB,4BAAgDqI,EAAcU,aACjEC,EAAIC,SAASC,cAAc,KACjCF,EAAEG,KAAOL,EACTE,EAAEI,SAAWN,EACbG,SAASI,KAAKC,YAAYN,GAC1BA,EAAEO,QACFN,SAASI,KAAKG,YAAYR,KAmDhBlD,QAAQ,YACRzC,MAAM,UACNoG,KAAK,QACLC,UAAWtF,EANb,SAQGA,EACD,WAEA,uBAMR,eAACuF,EAAA,EAAD,WACE,cAACC,EAAA,EAAD,CACEC,WAAY,cAACC,EAAA,EAAD,IACZpH,GAAIwF,EAAShD,WAFf,qBAMA,cAAC6E,EAAA,EAAD,UACE,qBAAK9K,UAAW6B,EAAQ+G,aAAxB,SACE,gDACGQ,QADH,IACGA,OADH,EACGA,EAAe2B,IAAIC,QAAQ,MAAO,aADrC,QAC8C,mBC5F3CC,GArB6B,SAAC,GAGtC,IAFL7I,EAEI,EAFJA,SACAoF,EACI,EADJA,SAGA,OACE,qCACE,cAACrE,EAAA,EAAD,0BAGEqE,EAASxD,KAAI,SAAC6D,EAASK,GAAV,OACb,cAAC,EAAD,CAEEe,SAAUpB,EACVzF,SAAUA,GAFL8F,UCYAgD,GAxB6B,SAAC,GAGtC,IAFLtK,EAEI,EAFJA,MACAwB,EACI,EADJA,SAEA,EAAkD1C,mBAA0B,MAA5E,mBAAOyL,EAAP,KAA0BC,EAA1B,KAMA,OACE,qCACE,cAAC,EAAD,CAAcxK,MAAOA,EAAOyG,gBANJ,SAACG,GAC3B4D,EAAqB5D,MAMI,OAAtB2D,GAA8BA,EAAkB/K,SAAWQ,EAAMR,OAChE,cAAC,GAAD,CACEgC,SAAUA,EACVoF,SAAU2D,IAEZ,SCfF9J,GAAYC,aAAW,SAACC,GAAD,OAC3BC,YAAa,CACX6J,MAAO,CACL5G,MAAO,MACPqC,SAAU,QACVwE,QAAS/J,EAAMpB,QAAQ,IAEzBoL,MAAO,CACL9G,MAAO,OAET+G,iBAAkB,CAChBC,UAAW,QACX3E,SAAU,SAEZ4E,WAAY,CACVC,YAAapK,EAAMpB,QAAQ,IAE7ByL,aAAc,CACZC,UAAWtK,EAAMpB,QAAQ,GACzB2L,aAAcvK,EAAMpB,QAAQ,SAuInB4L,GAlIc,WAC3B,IAAMlK,EAAUR,KAChB,EAAoC3B,mBAAS,GAA7C,mBAAOsM,EAAP,KAAmBC,EAAnB,KACA,EAA0BvM,mBAAwB,MAAlD,mBAAOkB,EAAP,KAAcsL,EAAd,KACA,EAAgDxM,mBAA0B,MAA1E,mBAAOsC,EAAP,KAAyBC,EAAzB,KACMsJ,EAhCC,CAAC,qBAAsB,kBAAmB,kBA0C3CY,EAAmB,SAAC7E,GACxB4E,EAAS5E,IAGL8E,EAA+B,SAAChK,GACpCH,EAAoBG,IAqCtB,OACE,cAACS,EAAA,EAAD,CACEC,WAAS,EACT3C,QAAS,EACT4C,UAAU,SACVE,WAAW,SACXD,eAAe,SACfqJ,MAAO,CAAEZ,UAAW,SANtB,SAQE,eAACa,EAAA,EAAD,CAAOtM,UAAW6B,EAAQwJ,MAA1B,UACE,eAACxI,EAAA,EAAD,CACEC,WAAS,EACTC,UAAU,SACVE,WAAW,SACXD,eAAe,SAJjB,UAME,cAACG,EAAA,EAAD,CAAY0D,QAAQ,KAApB,mBAGA,cAAC1D,EAAA,EAAD,CAAY0D,QAAQ,KAApB,kCAGA,cAAC0F,EAAA,EAAD,CACEvM,UAAW6B,EAAQ0J,MACnBS,WAAYA,EACZQ,kBAAgB,EAHlB,SAKGjB,EAAMvH,KAAI,SAACyI,GAAD,OACT,cAACC,EAAA,EAAD,UACE,cAACC,EAAA,EAAD,UACGF,KAFMA,QAOf,qBAAKzM,UAAW6B,EAAQ2J,iBAAxB,SA1De,SAACoB,GACtB,OAAQA,GACN,KAAK,EACH,OAAO,gCACH,cAAC,EAAD,CAAarM,aAAc4L,IAC3B,6BACa,OAAVvL,GAAkBA,EAAMoD,KAAI,SAACc,EAAMoD,GAAP,OAC3B,6BAAapD,EAAKxF,MAAT4I,WAInB,KAAK,EACH,OAAO,cAAC,EAAD,CAAWtG,yBAA0BwK,IAC9C,KAAK,EACH,OAAc,OAAVxL,GAAuC,OAArBoB,EACb,cAAC,GAAD,CAAWpB,MAAOA,EAAOwB,SAAUJ,IAErC,cAACkB,EAAA,EAAD,IACT,QACE,OAAO,qDAwCF2J,CAAeb,QAIpB,cAACnJ,EAAA,EAAD,CACEC,WAAS,EACTC,UAAU,MACVC,eAAe,WACfC,WAAW,SAJb,SAMG+I,IAAeT,EAAMnL,OACpB,cAACuJ,EAAA,EAAD,CACEC,QA9FQ,WAClBqC,EAAc,IA8FJzB,KAAK,QAFP,qBAOAwB,IAAeT,EAAMnL,OAAS,EAC5B,8BACE,cAACuJ,EAAA,EAAD,CACE9C,QAAQ,YACRzC,MAAM,UACNoG,KAAK,QACLZ,QA9GG,WACjBqC,GAAc,SAACa,GAAD,OAAkBA,EAAe,MA8GjCrC,UA/Fa,WAC3B,OAAQuB,GACN,KAAK,EACH,OAAkB,OAAVpL,GAAkBA,EAAMR,OAAS,EAC3C,KAAK,EACH,OAA4B,OAArB4B,EACT,QACE,OAAO,GAwFc+K,GALb,oBAUF,aC5ICC,OAdf,WACE,OACE,cAAC,IAAD,UACE,eAAC,IAAD,WACE,cAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAI7J,UAAW0I,KACjC,cAAC,IAAD,CAAOkB,OAAK,EAACC,KAAK,mBAAmB7J,UAAW5D,IAChD,cAAC,IAAD,wBCGO0N,GAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqB7K,MAAK,YAAkD,IAA/C8K,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCHdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,GAAD,MAEF7D,SAAS8D,eAAe,SAM1BX,O","file":"static/js/main.7d459c2b.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport { BlocklyWorkspace } from 'react-blockly';\n\nconst ASCAD_TOOLBOX = {\n  kind: \"categoryToolbox\",\n  contents: [\n    {\n      kind: \"category\",\n      name: \"Logic\",\n      colour: \"#5C81A6\",\n      contents: [\n        {\n          kind: \"block\",\n          type: \"controls_if\",\n        },\n        {\n          kind: \"block\",\n          type: \"logic_compare\",\n        },\n      ],\n    },\n    {\n      kind: \"category\",\n      name: \"Math\",\n      colour: \"#5CA65C\",\n      contents: [\n        {\n          kind: \"block\",\n          type: \"math_round\",\n        },\n        {\n          kind: \"block\",\n          type: \"math_number\",\n        },\n      ],\n    },\n    {\n      kind: \"category\",\n      name: \"Custom\",\n      colour: \"#5CA699\",\n      contents: [\n        {\n          kind: \"block\",\n          type: \"new_boundary_function\",\n        },\n        {\n          kind: \"block\",\n          type: \"return\",\n        },\n      ],\n    },\n  ],\n};\n\nconst ScenarioEditor: React.FC = () => {\n  const [xml, setXml] = useState('');\n\n  return (\n    <BlocklyWorkspace\n      toolboxConfiguration={ASCAD_TOOLBOX}\n      initialXml={xml}\n      onXmlChange={setXml}\n      className=\"fill-height\"\n      workspaceConfiguration={{\n        grid: {\n          spacing: 20,\n          length: 3,\n          colour: \"#ccc\",\n          snap: true,\n        },\n      }}\n    />\n  );\n}\n \nexport default ScenarioEditor;","import React from 'react';\nimport { DropzoneArea } from 'material-ui-dropzone';\n\ntype FileDropperProps = {\n  onFileUpload?: (files: File[]) => void;\n}\nconst FileDropper: React.FC<FileDropperProps> = ({\n  onFileUpload\n}) => {\n  \n  const handleChange = (files: File[]) => {\n    onFileUpload?.apply(null, [files]);\n  } \n  \n  return (\n    <DropzoneArea\n      maxFileSize={1e9}\n      filesLimit={10}\n      dropzoneText={\"Drag and drop a STEP file here or click\"}\n      onChange={handleChange}\n    />\n  );\n}\n\nexport default FileDropper;\n","export const CONSTANTS = {\n  \n  API_BASE_URL: 'https://api.magman.synology.me',\n\n  GENERIC_USER_KEY: 1006,\n}\n","import axios from \"axios\";\nimport { CONSTANTS } from \"./constants\";\n\nexport default axios.create({\n  baseURL: CONSTANTS.API_BASE_URL,\n  headers: {\n    'Content-Type': 'application/json',\n  },\n});\n","import { CircularProgress, createStyles, FormControl, FormControlLabel, FormLabel, Grid, makeStyles, Radio, RadioGroup, Theme, Typography } from '@material-ui/core';\nimport React, { useState } from 'react';\nimport { useCallback } from 'react';\nimport { useEffect } from 'react';\nimport axiosInstance from '../axiosInstance';\nimport { Scenario } from '../models/scenario';\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      margin: theme.spacing(1),\n    },\n  }),\n);\ntype ScenariosProps = {\n  onSelectedScenarioChange: (scenario: Scenario) => void;\n}\nconst Scenarios: React.FC<ScenariosProps> = ({\n  onSelectedScenarioChange,\n}) => {\n  const classes = useStyles();\n  const [scenarios, setSenarios] = useState<Scenario[] | null>(null);\n  const [selectedScenario, setSelectedScenario] = useState<Scenario | null>(null);\n  \n  const updateScenario = useCallback((scenario: Scenario | null) => {\n    setSelectedScenario(scenario);\n    if (scenario !== null) {\n      onSelectedScenarioChange(scenario);\n    }\n  }, []);\n  \n  useEffect(() => {\n    axiosInstance.get('/scenarios').then((response) => {\n      if (response.status === 200) {\n        const scenarioListJson = response.data as Scenario[];\n        setSenarios(scenarioListJson);\n        if (scenarioListJson.length > 0) {\n          updateScenario(scenarioListJson[0]);\n        }\n      } else {\n        setSenarios(null);\n      }\n    })\n  }, [updateScenario]);\n\n  const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const selectedScenarioID = Number.parseInt((event.target as HTMLInputElement).value);\n    updateScenario(scenarios?.find((scenario) => scenario.id === selectedScenarioID) ?? null);\n  }\n\n  return (\n    <div className={classes.root}>\n      <Grid\n        container\n        direction=\"column\"\n        justifyContent=\"center\"\n        alignItems=\"center\"\n      >\n        {scenarios === null ?\n          <>\n            <CircularProgress />\n            <Typography>\n              Loading scenarios...\n            </Typography>\n          </>\n          :\n          <FormControl component=\"fieldset\">\n            <FormLabel component=\"legend\">\n              Scenarios\n            </FormLabel>\n            <RadioGroup \n              name=\"scenario\" \n              value={selectedScenario?.id ?? -1} \n              onChange={handleChange}\n            >\n              {scenarios !== null && scenarios.map((scenario) => \n                <FormControlLabel\n                  key={scenario.id}\n                  value={scenario.id}\n                  control={<Radio color=\"primary\" />}\n                  label={scenario.name}\n                />\n              )}\n            </RadioGroup>\n          </FormControl>\n        }\n      </Grid>\n    </div>\n  );\n}\n\nexport default Scenarios;\n","import { Avatar, Box, createStyles, Grid, LinearProgress, makeStyles, Theme, Tooltip, Typography } from '@material-ui/core';\nimport { green, red } from '@material-ui/core/colors';\nimport { Check as CheckIcon, Clear as ClearIcon } from '@material-ui/icons';\nimport React from 'react';\nimport { useEffect } from 'react';\nimport { useState } from 'react';\nimport axiosInstance from '../axiosInstance';\nimport { CONSTANTS } from '../constants';\nimport { Model } from '../models/model';\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    doneAvatar: {\n      backgroundColor: green[500],\n      width: theme.spacing(3),\n      height: theme.spacing(3),\n    },\n    errorAvatar: {\n      backgroundColor: red[500],\n      width: theme.spacing(3),\n      height: theme.spacing(3),\n    },\n}));\ntype FileUploadProps = {\n  file: File;\n  onEnd?: () => void;\n  onValidUpload?: (modelId: string) => void;\n}\nconst FileUpload: React.FC<FileUploadProps> = ({\n  file,\n  onEnd,\n  onValidUpload,\n}) => {\n  const classes = useStyles();\n  const [progress, setProgress] = useState(0);\n  const [isDone, setIsDone] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n\n  const onProgress = (event: ProgressEvent) => {\n    event.stopPropagation();\n    setProgress(Math.round(100 * event.loaded / event.total));\n    if (event.loaded === event.total) {\n      setIsDone(true);\n      onEnd?.call(null);\n    }\n  }\n\n  const getFeedbackAvatar = (): React.ReactNode => {\n    if (error !== null) {\n      return <Tooltip title={error}>\n        <Avatar className={classes.errorAvatar}>\n          <ClearIcon />\n        </Avatar>\n      </Tooltip>\n    }\n    if (isDone) {\n      return <Avatar className={classes.doneAvatar}>\n        <CheckIcon />\n      </Avatar>\n    }\n    return <Typography>\n      {progress} %\n    </Typography>\n  }\n\n  useEffect(() => {\n    const formData = new FormData();\n    formData.append('UserFK', CONSTANTS.GENERIC_USER_KEY.toString());\n    formData.append('CadModelFile', file);\n\n    axiosInstance\n      .post('/models', formData, {onUploadProgress: onProgress})\n      .then((response) => {\n        if (response.status !== 201) {\n          setError(`${response.status} ${response.statusText}`);\n        } else {\n          const model = response.data as Model;\n          onValidUpload?.call(null, model.uid);\n        }\n      })\n      .catch(error => {\n        setError(error.message);\n      });\n  }, []);\n\n  return (\n    <>\n      <Grid\n        container\n        justifyContent=\"center\"\n        direction=\"row\"\n        alignItems=\"center\"\n      >\n        <Typography>\n          {file.name}\n        </Typography>\n      </Grid>\n      <Box\n        display=\"flex\" \n        alignItems=\"center\"\n      >\n        <Box\n          width=\"90%\"\n          mr={1}\n        >\n          <LinearProgress variant=\"determinate\" value={progress} />\n        </Box>\n        <Box minWidth={35}>\n          {getFeedbackAvatar()}\n        </Box>\n      </Box>\n    </>\n  );\n}\n\nexport default FileUpload;\n","import { Typography } from '@material-ui/core';\nimport React, { useCallback, useEffect, useState } from 'react';\nimport FileUpload from './FileUpload';\n\ntype FileUploaderProps = {\n  files: File[],\n  onFileUploadEnd?: (validModelsIds: string[]) => void;\n}\nconst FileUploader: React.FC<FileUploaderProps> = ({\n  files,\n  onFileUploadEnd,\n}) => {\n  const [uploadedFiles, setUploadedFiles] = useState(0);\n  const [modelIds, setModelIds] = useState<string[]>([]);\n\n  const handleUploadEnd = useCallback(() => {\n    setUploadedFiles((upFiles) => upFiles + 1);\n  }, []);\n\n  const handleValidUpload = (modelId: string) => {\n    setModelIds((oldModelIds) => {\n      // Inutile ?\n      const nOldModelIds = oldModelIds.slice();\n      nOldModelIds.push(modelId);\n      return nOldModelIds;\n    });\n  };\n\n  useEffect(() => {\n    if (modelIds.length >= files.length) {\n      onFileUploadEnd?.call(null, modelIds);\n    }\n  }, [uploadedFiles, modelIds]);\n\n  return (\n    <>\n      <Typography>\n        {uploadedFiles === files.length ? \n          `Upload done !` :\n          `Uploading files... (${uploadedFiles}/${files.length})`\n        }\n      </Typography>\n      {files.map((file, i) => \n        <FileUpload\n          key={i}\n          file={file}\n          onEnd={handleUploadEnd} \n          onValidUpload={handleValidUpload}\n        /> \n      )}\n    </>\n  );\n}\n\nexport default FileUploader;\n","import { useEffect, useRef } from 'react'\n\nfunction useInterval(callback: () => void, delay: number | null): void {\n  const savedCallback = useRef(callback)\n\n  // Remember the latest callback if it changes.\n  useEffect(() => {\n    savedCallback.current = callback\n  }, [callback])\n\n  // Set up the interval.\n  useEffect(() => {\n    // Don't schedule if no delay is specified.\n    if (delay === null) {\n      return\n    }\n\n    const id = setInterval(() => savedCallback.current(), delay)\n\n    return () => clearInterval(id)\n  }, [delay])\n}\n\nexport default useInterval;\n","import { Accordion, AccordionDetails, AccordionSummary, Button, createStyles, Grid, makeStyles, Theme, Typography } from '@material-ui/core';\nimport { ExpandMore as ExpandMoreIcon } from '@material-ui/icons';\nimport React, { useEffect, useState } from 'react';\nimport axiosInstance from '../axiosInstance';\nimport { CONSTANTS } from '../constants';\nimport useInterval from '../hooks/useInterval';\nimport { Process } from '../models/process';\nimport { Scenario } from '../models/scenario';\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    downloadButton: {\n      margin: theme.spacing(1),\n    },\n    logAccordion: {\n      wordWrap: \"break-word\",\n      whiteSpace: \"pre-wrap\",\n      wordBreak: \"break-all\",\n    },\n  }),\n);\n\ntype ProcessHandlerProps = {\n  modelUid: string;\n  scenario: Scenario;\n}\nconst ProcessHandler: React.FC<ProcessHandlerProps> = ({\n  modelUid,\n  scenario,\n}) => {\n  const classes = useStyles();\n  const [process, setProcess] = useState<Process | null>(null);\n  // TODO : Gérer les erreurs (snackbar?)\n  //const [error, setError] = useState<string | null>(null);\n  const [processResult, setProcessResult] = useState<Process | null>(null);\n  const [isDone, setIsDone] = useState(false)\n\n  const handleDownload = () => {\n    if (processResult === null) \n      return;\n\n    const url = `${CONSTANTS.API_BASE_URL}/models/download/${processResult.modelOutUid}`;\n    const a = document.createElement('a');\n    a.href = url;\n    a.download = url;\n    document.body.appendChild(a);\n    a.click();\n    document.body.removeChild(a);\n  }\n\n  useInterval(() => {\n    axiosInstance\n      .get(`/processes/${process?.uid ?? 0}`)\n      .then((response) => {\n        setProcessResult(response.data as Process);\n        if (processResult?.status == 2) {\n          setIsDone(true);\n        }\n      });\n  }, process !== null && !isDone ? 1000 : null);\n\n  useEffect(() => {\n    const formData = new FormData();\n    formData.append('modelInUid', modelUid.toString());\n    formData.append('scenarioFK', scenario.id.toString());\n    formData.append('userFK', CONSTANTS.GENERIC_USER_KEY.toString());\n\n    axiosInstance\n      .post('/processes', JSON.stringify(Object.fromEntries(formData)))\n      .then((response) => {\n        if (response.status !== 201) {\n          // setError(`${response.status} ${response.statusText}`);\n        } else {\n          setProcess(response.data as Process);\n        }\n      })\n      .catch(() => { // error parameter\n        // setError(error.message);\n      })\n  }, []);\n\n  return (\n    <>\n      <Grid\n        container\n        direction=\"row\"\n        justifyContent=\"space-between\"\n        alignItems=\"center\"\n      >\n        <Grid item>\n          <Typography>\n            Processing model #{modelUid} with scenario {scenario.name}\n          </Typography>\n        </Grid>\n          <Grid item>\n            <Button \n              className={classes.downloadButton}\n              onClick={handleDownload}\n              variant=\"contained\"\n              color=\"primary\"\n              size=\"large\"\n              disabled={!isDone}\n            >\n              {isDone ?\n              \"Download\"\n              :\n              \"Processing...\"\n              }\n            </Button>\n          </Grid>\n      </Grid>\n\n      <Accordion>\n        <AccordionSummary\n          expandIcon={<ExpandMoreIcon />}\n          id={modelUid.toString()}\n        >\n          See Log\n        </AccordionSummary>\n        <AccordionDetails>\n          <pre className={classes.logAccordion}>\n            <code>\n              {processResult?.log.replace(/\\r/g, '\\n') ?? \"...\"}\n            </code>\n          </pre>\n        </AccordionDetails>\n      </Accordion>\n    </>\n  );\n}\n\nexport default ProcessHandler;\n","import { Typography } from '@material-ui/core';\nimport React from 'react';\nimport { Scenario } from '../models/scenario';\nimport ProcessHandler from './ProcessHandler';\n\ntype ProcessesProps = {\n  scenario: Scenario;\n  modelIds: string[];\n}\nconst Processes: React.FC<ProcessesProps> = ({\n  scenario,\n  modelIds,\n}) => {\n\n  return (\n    <>\n      <Typography>\n        Processes : \n      </Typography>\n      {(modelIds.map((modelId, i) =>\n        <ProcessHandler\n          key={i}\n          modelUid={modelId}\n          scenario={scenario}\n        />\n      ))}\n    </>\n  );\n}\n\nexport default Processes;\n","import React, { useState } from 'react';\nimport { Scenario } from '../models/scenario';\nimport FileUploader from './FileUploader';\nimport Processes from './Processes';\n\ntype ConverterProps = {\n  files: File[];\n  scenario: Scenario;\n}\nconst Converter: React.FC<ConverterProps> = ({\n  files,\n  scenario,\n}) => {\n  const [uploadedModelsIds, setUploadedModelsIds] = useState<string[] | null>(null);\n\n  const handleFileUploadEnd = (modelIds: string[]) => {\n    setUploadedModelsIds(modelIds);\n  }\n\n  return (\n    <>\n      <FileUploader files={files} onFileUploadEnd={handleFileUploadEnd} />\n      {uploadedModelsIds !== null && uploadedModelsIds.length === files.length ? // Tous les fichiers uploadés doivent passer\n        <Processes\n          scenario={scenario}\n          modelIds={uploadedModelsIds}\n        /> :\n        null\n      }\n    </>\n  );\n}\n\nexport default Converter;\n","import React, { useState } from 'react';\nimport './App.css';\nimport { Button, createStyles, Grid, Paper, makeStyles, Step, StepLabel, Stepper, Theme, Typography, CircularProgress } from '@material-ui/core';\nimport FileDropper from './components/FileDropper';\nimport Scenarios from './components/Scenarios';\nimport { Scenario } from './models/scenario';\nimport Converter from './components/Converter';\n\nconst getSteps = (): string[] => {\n  return ['Select CAD file(s)', 'Choose scenario', 'Get your files'];\n}\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    paper: {\n      width: '50%',\n      minWidth: '50rem',\n      padding: theme.spacing(2),\n    },\n    steps: {\n      width: '90%',\n    },\n    contentContainer: {\n      minHeight: '20rem',\n      minWidth: '50rem',\n    },\n    backButton: {\n      marginRight: theme.spacing(1),\n    },\n    instructions: {\n      marginTop: theme.spacing(1),\n      marginBottom: theme.spacing(1),\n    },\n  }),\n);\n\nconst MainWindow: React.FC = () => {\n  const classes = useStyles();\n  const [activeStep, setActiveStep] = useState(0);\n  const [files, setFiles] = useState<File[] | null>(null);\n  const [selectedScenario, setSelectedScenario] = useState<Scenario | null>(null);\n  const steps = getSteps();\n\n  const handleNext = () => {\n    setActiveStep((previousStep) => previousStep + 1);\n  }\n\n  const handleReset = () => {\n    setActiveStep(0);\n  }\n\n  const handleFileUpload = (uploadedFiles: File[]) => {\n    setFiles(uploadedFiles);\n  }\n\n  const handleSelectedScenarioChange = (scenario: Scenario) => {\n    setSelectedScenario(scenario);\n  }\n\n  const canProceedToNextStep = (): boolean => {\n    switch (activeStep) {\n      case 0:\n        return (files !== null && files.length > 0);\n      case 1:\n        return selectedScenario !== null;\n      default:\n        return false;\n    }\n  }\n\n  const getStepContent = (stepIndex: number): React.ReactNode => {\n    switch (stepIndex) {\n      case 0:\n        return <div>\n            <FileDropper onFileUpload={handleFileUpload} />\n            <ul>\n              {files !== null && files.map((file, i) => \n                <li key={i}>{file.name}</li>  \n              )}\n            </ul>\n          </div>\n      case 1:\n        return <Scenarios onSelectedScenarioChange={handleSelectedScenarioChange} />\n      case 2:\n        if (files !== null && selectedScenario !== null) {\n          return <Converter files={files} scenario={selectedScenario} />\n        }\n        return <CircularProgress />\n      default:\n        return <div>Unknown stepIndex</div>;\n    }\n  }\n\n  return (\n    <Grid\n      container\n      spacing={0}\n      direction=\"column\"\n      alignItems=\"center\"\n      justifyContent=\"center\"\n      style={{ minHeight: '100vh' }}\n    >\n      <Paper className={classes.paper}>\n        <Grid\n          container\n          direction=\"column\"\n          alignItems=\"center\"\n          justifyContent=\"center\"\n        >\n          <Typography variant=\"h4\">\n            ASCAD\n          </Typography>\n          <Typography variant=\"h6\">\n            Simplify and Convert\n          </Typography>\n          <Stepper\n            className={classes.steps}\n            activeStep={activeStep}\n            alternativeLabel\n          >\n            {steps.map((stepLabel) =>\n              <Step key={stepLabel}>\n                <StepLabel>\n                  {stepLabel}  \n                </StepLabel>\n              </Step>\n            )}\n          </Stepper>\n          <div className={classes.contentContainer}>\n            {getStepContent(activeStep)}\n          </div>\n        </Grid>\n\n        <Grid\n          container\n          direction=\"row\"\n          justifyContent=\"flex-end\"\n          alignItems=\"center\"\n        >\n          {activeStep === steps.length ? (\n            <Button \n              onClick={handleReset}\n              size=\"large\"\n            >\n              Restart\n            </Button>\n          ) : (\n            activeStep !== steps.length - 1 ?\n              <div>\n                <Button\n                  variant=\"contained\"\n                  color=\"primary\"\n                  size=\"large\"\n                  onClick={handleNext}\n                  disabled={!canProceedToNextStep()}\n                >\n                  Next\n                </Button>\n              </div>\n            : null)}\n        </Grid>\n      </Paper>\n    </Grid>\n  );\n}\n\nexport default MainWindow;\n","import React from 'react';\nimport { HashRouter, Switch, Route } from 'react-router-dom';\nimport ScenarioEditor from './components/ScenarioEditor';\nimport MainWindow from './MainWindow';\n\nfunction App(): JSX.Element {\n  return (\n    <HashRouter>\n      <Switch>\n        <Route exact path=\"/\" component={MainWindow} />\n        <Route exact path=\"/scenario-editor\" component={ScenarioEditor} />\n        <Route>\n          404\n        </Route>\n      </Switch>\n    </HashRouter>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler): void => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}